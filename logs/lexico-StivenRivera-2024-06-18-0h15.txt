2024-06-18 00:15:02,992 | Algoritmo 1
2024-06-18 00:15:02,993 | INPUT : 
    (defn longitud-cadena [s]
        ;; Verifica que el argumento sea una cadena
        (if (string? s)
            ;; Calcula la longitud iterando sobre cada carácter
            (loop [contador 0
                cadena s]
                (if (empty? cadena)
                contador
            (recur (inc contador) (subs cadena 1))))
            ;; Genera una excepción si el argumento no es una cadena
        (throw (IllegalArgumentException. "El argumento debe ser una cadena"))))
    
    
2024-06-18 00:15:02,997 | LexToken(LPAREN,'(',2,5)
2024-06-18 00:15:02,998 | LexToken(DEFN,'defn',2,6)
2024-06-18 00:15:02,999 | LexToken(ID,'longitud-cadena',2,11)
2024-06-18 00:15:02,999 | LexToken(LBRACK,'[',2,27)
2024-06-18 00:15:03,000 | LexToken(ID,'s',2,28)
2024-06-18 00:15:03,001 | LexToken(RBRACK,']',2,29)
2024-06-18 00:15:03,001 | LexToken(LPAREN,'(',4,91)
2024-06-18 00:15:03,002 | LexToken(IF,'if',4,92)
2024-06-18 00:15:03,002 | LexToken(LPAREN,'(',4,95)
2024-06-18 00:15:03,002 | LexToken(ID,'string?',4,96)
2024-06-18 00:15:03,003 | LexToken(ID,'s',4,104)
2024-06-18 00:15:03,003 | LexToken(RPAREN,')',4,105)
2024-06-18 00:15:03,004 | LexToken(LPAREN,'(',6,183)
2024-06-18 00:15:03,005 | LexToken(LOOP,'loop',6,184)
2024-06-18 00:15:03,008 | LexToken(LBRACK,'[',6,189)
2024-06-18 00:15:03,009 | LexToken(ID,'contador',6,190)
2024-06-18 00:15:03,011 | LexToken(INT,0,6,199)
2024-06-18 00:15:03,012 | LexToken(ID,'cadena',7,217)
2024-06-18 00:15:03,012 | LexToken(ID,'s',7,224)
2024-06-18 00:15:03,014 | LexToken(RBRACK,']',7,225)
2024-06-18 00:15:03,015 | LexToken(LPAREN,'(',8,243)
2024-06-18 00:15:03,018 | LexToken(IF,'if',8,244)
2024-06-18 00:15:03,019 | LexToken(LPAREN,'(',8,247)
2024-06-18 00:15:03,021 | LexToken(ID,'empty?',8,248)
2024-06-18 00:15:03,023 | LexToken(ID,'cadena',8,255)
2024-06-18 00:15:03,027 | LexToken(RPAREN,')',8,261)
2024-06-18 00:15:03,030 | LexToken(ID,'contador',9,279)
2024-06-18 00:15:03,031 | LexToken(LPAREN,'(',10,300)
2024-06-18 00:15:03,031 | LexToken(RECUR,'recur',10,301)
2024-06-18 00:15:03,032 | LexToken(LPAREN,'(',10,307)
2024-06-18 00:15:03,037 | LexToken(ID,'inc',10,308)
2024-06-18 00:15:03,039 | LexToken(ID,'contador',10,312)
2024-06-18 00:15:03,040 | LexToken(RPAREN,')',10,320)
2024-06-18 00:15:03,041 | LexToken(LPAREN,'(',10,322)
2024-06-18 00:15:03,044 | LexToken(ID,'subs',10,323)
2024-06-18 00:15:03,046 | LexToken(ID,'cadena',10,328)
2024-06-18 00:15:03,047 | LexToken(INT,1,10,335)
2024-06-18 00:15:03,047 | LexToken(RPAREN,')',10,336)
2024-06-18 00:15:03,048 | LexToken(RPAREN,')',10,337)
2024-06-18 00:15:03,053 | LexToken(RPAREN,')',10,338)
2024-06-18 00:15:03,054 | LexToken(RPAREN,')',10,339)
2024-06-18 00:15:03,056 | LexToken(LPAREN,'(',12,418)
2024-06-18 00:15:03,057 | LexToken(THROW,'throw',12,419)
2024-06-18 00:15:03,058 | LexToken(LPAREN,'(',12,425)
2024-06-18 00:15:03,062 | LexToken(ID,'IllegalArgumentException',12,426)
2024-06-18 00:15:03,063 | LexToken(STRING,'"El argumento debe ser una cadena"',12,452)
2024-06-18 00:15:03,065 | LexToken(RPAREN,')',12,486)
2024-06-18 00:15:03,067 | LexToken(RPAREN,')',12,487)
2024-06-18 00:15:03,068 | LexToken(RPAREN,')',12,488)
2024-06-18 00:15:03,070 | LexToken(RPAREN,')',12,489)
